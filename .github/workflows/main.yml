name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - released
env:
  PREVIOUS: 2021.2.0.651.0
  LATEST: 2022.1.0.209.0
  # PREVIEW: 2022.2.0.270.0
jobs:
  build:
    timeout-minutes: 20
    strategy:
      matrix:
        version: [previous, latest]
        # version: [latest, preview]
        platform: [common, health]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set image
        id: image
        run: |
          IMAGE=containers.intersystems.com/intersystems/iris-community
          [ '${{ matrix.platform }}' == 'health' ] && IMAGE=containers.intersystems.com/intersystems/irishealth-community
          VERSION=${{ env.LATEST }}
          [ '${{ matrix.version }}' == 'previous' ] && VERSION=${{ env.PREVIOUS }}
          [ '${{ matrix.version }}' == 'latest' ] && VERSION=${{ env.LATEST }}
          [ '${{ matrix.version }}' == 'preview' ] && VERSION=${{ env.PREVIEW }}
          echo ::set-output name=name::${IMAGE}:${VERSION}
      - name: Setup version
        id: version
        run: |
          VERSION=`grep -oPm1 "(?<=<Version>)[^<]+" module.xml | cut -d- -f1`
          git tag -l | cat
          [ $GITHUB_EVENT_NAME == 'release' ] && VERSION=${{ github.event.release.tag_name }} && VERSION=${VERSION/v/}
          [ $GITHUB_EVENT_NAME == 'push' ] && VERSION+=-beta && VERSION+=.$(($(git tag -l "v$VERSION.*" | sort -nt. -k4 2>/dev/null | tail -1 | cut -d. -f4)+1))
          [ $GITHUB_EVENT_NAME == 'pull_request' ] && VERSION+=-dev.${{ github.event.pull_request.number }} && VERSION+=.$(($(git tag -l "v$VERSION.*" | sort -nt. -k4 2>/dev/null | tail -1 | cut -d. -f5)+1))
          sed -i -E "s/<Version>(.*)<\/Version>/<Version>${VERSION}<\/Version>/" module.xml
          cat module.xml
          echo ::set-output name=number::${VERSION}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          load: true
          tags: zpm
          build-args: BASE=${{ steps.image.outputs.name }}
      - name: Run temporary registry
        timeout-minutes: 15
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com --username ${{ github.actor }} --password-stdin
          docker pull docker.pkg.github.com/intersystems-community/zpm-registry/zpm-registry
          docker network create zpm
          docker run --rm -d \
            --network zpm \
            --name registry \
            -p 52773:52773 \
            --network-alias registry \
            docker.pkg.github.com/intersystems-community/zpm-registry/zpm-registry \
            -a "iris session iris -U%SYS '##class(Security.Users).UnExpireUserPasswords(\"*\")'"
          REGISTRY=`docker ps -lq`
          sleep 5; docker exec $REGISTRY /usr/irissys/dev/Cloud/ICM/waitISC.sh
          docker logs $REGISTRY
      - name: Test and Verify
        timeout-minutes: 15
        run: |
          docker run --network zpm -d --rm \
            -e TEST_REGISTRY=http://registry:52773/registry/ \
            -e TEST_REGISTRY_USER=admin \
            -e TEST_REGISTRY_PASSWORD=SYS \
            -v `pwd`:/home/irisowner/zpm/ \
            zpm --check-caps false
          CONTAINER=`docker ps -lq`
          sleep 5; docker exec $CONTAINER /usr/irissys/dev/Cloud/ICM/waitISC.sh
          /bin/echo -e '' \
            'zpm "list":1\n' \
            'zpm "test zpm -v -only":1\n' \
            'zpm "verify zpm -v -only":1' \
            'halt\n' \
          | docker exec -i $CONTAINER iris session iris -U%SYS
          docker stop $CONTAINER
      - name: Restart temporary registry
        timeout-minutes: 15
        run: |
          docker rm -f registry || true
          docker run --rm -d \
            --network zpm \
            --name registry \
            -p 52773:52773 \
            --network-alias registry \
            docker.pkg.github.com/intersystems-community/zpm-registry/zpm-registry \
            -a "iris session iris -U%SYS '##class(Security.Users).UnExpireUserPasswords(\"*\")'"
          REGISTRY=`docker ps -lq`
          sleep 5; docker exec $REGISTRY /usr/irissys/dev/Cloud/ICM/waitISC.sh
          docker logs $REGISTRY
      - name: Test and publish to temporary registry
        timeout-minutes: 15
        run: |
          docker run --network zpm -d --rm -v `pwd`:/home/irisowner/zpm/ zpm --check-caps false
          CONTAINER=`docker ps -lq`
          sleep 5; docker exec $CONTAINER /usr/irissys/dev/Cloud/ICM/waitISC.sh
          /bin/echo -e '' \
            'zpm "repo -r -name registry -url https://pm.community.intersystems.com/":1\n' \
            'zpm "repo -list":1\n' \
            'zpm "install dsw":1\n' \
            'zpm "install sslclient":1\n' \
            'zpm "list":1\n' \
            'zpm "repo -r -name registry -url ""http://registry:52773/registry/"" -username admin -password SYS":1\n' \
            'zpm "publish zpm -v":1' \
            'zpm "publish sslclient -v":1' \
            'zpm "search":1' \
            'halt\n' \
          | docker exec -i $CONTAINER iris session iris -U%SYS
          docker stop $CONTAINER
      - name: Clean install current version and test new one
        timeout-minutes: 15
        run: |
          curl http://localhost:52773/registry/packages/-/all | jq
          curl http://localhost:52773/registry/packages/zpm/ | jq
          wget https://pm.community.intersystems.com/packages/zpm/latest/installer -O /tmp/zpm.xml
          docker run --network zpm --rm -d -v /tmp/zpm.xml:/home/irisowner/zpm.xml ${{ steps.image.outputs.name }} --check-caps false
          CONTAINER=`docker ps -lq`
          sleep 5; docker exec $CONTAINER /usr/irissys/dev/Cloud/ICM/waitISC.sh
          /bin/echo -e '' \
            'set sc = ##class(%SYSTEM.OBJ).Load("/home/irisowner/zpm.xml", "ck")\n' \
            'if +sc=0 do ##class(%SYSTEM.Process).Terminate(,1)\n' \
            'zpm "list":1\n' \
            'zpm "repo -r -name registry -url ""http://registry:52773/registry/"" -username admin -password SYS":1\n' \
            'zpm "repo -list"\n' \
            'zpm "search":1\n' \
            'zpm "install sslclient":1\n' \
            'zpm "install zpm -v":1\n' \
            'zpm "list":1\n' \
            'zpm "version":1\n' \
            'halt\n' \
          | docker exec -i $CONTAINER iris session iris -U%SYS
          docker stop $CONTAINER
      - name: Clean install and test
        timeout-minutes: 15
        run: |
          wget http://localhost:52773/registry/packages/zpm/latest/installer -O /tmp/zpm.xml
          docker run --network zpm --rm -d -v /tmp/zpm.xml:/home/irisowner/zpm.xml ${{ steps.image.outputs.name }} --check-caps false
          CONTAINER=`docker ps -lq`
          sleep 5; docker exec $CONTAINER /usr/irissys/dev/Cloud/ICM/waitISC.sh
          /bin/echo -e '' \
            'set sc = ##class(%SYSTEM.OBJ).Load("/home/irisowner/zpm.xml", "ck")\n' \
            'if +sc=0 do ##class(%SYSTEM.Process).Terminate(,1)\n' \
            'zpm "list":1\n' \
            'zpm "repo -r -name registry -url https://pm.community.intersystems.com/":1\n' \
            'zpm "install dsw":1\n' \
            'zpm "list":1\n' \
            'halt\n' \
          | docker exec -i $CONTAINER iris session iris -U%SYS
          docker stop $CONTAINER
      - name: Prepare XML Installer
        timeout-minutes: 15
        run: |
          wget http://localhost:52773/registry/packages/zpm/latest/installer -O zpm-${{ steps.version.outputs.number }}.xml
      - name: Stop temporary registry
        run: |
          docker stop registry
          docker network rm zpm
      - uses: actions/upload-artifact@v2
        if: matrix.version == 'latest' && matrix.platform == 'common'
        with:
          name: zpm-${{ steps.version.outputs.number }}
          path: zpm-${{ steps.version.outputs.number }}.xml
      - name: Create Beta Release
        id: create_release
        uses: actions/create-release@v1
        if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && github.event_name != 'release' && matrix.version == 'latest' && matrix.platform == 'common'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.number }}
          release_name: v${{ steps.version.outputs.number }}
          prerelease: ${{ github.event_name != 'release' }}
      - name: Upload Beta Release Asset
        uses: actions/upload-release-asset@v1
        if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && github.event_name != 'release' && matrix.version == 'latest' && matrix.platform == 'common'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: zpm-${{ steps.version.outputs.number }}.xml
          asset_name: zpm-${{ steps.version.outputs.number }}.xml
          asset_content_type: text/xml
      - name: Upload Public Release Asset
        uses: actions/upload-release-asset@v1
        if: github.event_name == 'release' && matrix.version == 'latest' && matrix.platform == 'common'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: zpm-${{ steps.version.outputs.number }}.xml
          asset_name: zpm-${{ steps.version.outputs.number }}.xml
          asset_content_type: text/xml
      - name: Publish release
        if: github.event_name == 'release' && matrix.version == 'latest' && matrix.platform == 'common'
        run: |
          [ -n '${{ secrets.REGISTRY_USERNAME }}' ] && (
            docker run -d --rm -v `pwd`:/home/irisowner/zpm/ zpm --check-caps false
            CONTAINER=`docker ps -lq`
            sleep 5; docker exec $CONTAINER /usr/irissys/dev/Cloud/ICM/waitISC.sh
            /bin/echo -e '' \
              'zpm "list":1\n' \
              'zpm "repo -r -name registry -url ""https://pm.community.intersystems.com/"" -username ${{ secrets.REGISTRY_USERNAME }} -password ${{ secrets.REGISTRY_PASSWORD }}":1\n' \
              'zpm "publish zpm -v":1' \
              'halt\n' \
            | docker exec -i $CONTAINER iris session iris -U%SYS
            docker stop $CONTAINER
          ) || true
  bump-release-version:
    name: bump release version
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: build
    steps:
      - uses: actions/checkout@master
        with:
          ref: master
      - run: |
          VERSION=${{ github.event.release.tag_name }} && VERSION=${VERSION/v/}
          NEXT_VERSION=`echo $VERSION | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.`
          [ $NEXT_VERSION != $VERSION ] && (
            sed -i -E "s/<Version>(.*)<\/Version>/<Version>${NEXT_VERSION/v/}-SNAPSHOT<\/Version>/" module.xml
            cat module.xml
            git config --global user.name 'ProjectBot'
            git config --global user.email 'bot@users.noreply.github.com'
            git add module.xml
            git commit -m 'auto bump version with release'
            git push
          )
